# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository_owner }}/say-website-builder:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        

        
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install dependencies
        # Installs the gems specified in the Gemfile (ImageMagick and Python packages are pre-installed in container)
        run: bundle install --jobs 4 --retry 3

      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" --config _config.yml,_config.production.yml --trace --verbose
        env:
          JEKYLL_ENV: production

      - name: Generate SEO Report
        run: python3 seo.py --verbose --html-output _site/seo.html --threads 8 --base-url https://stanthonynovato.github.io/${{ steps.pages.outputs.base_url}}
      
      - name: Archive compression analysis data
        uses: actions/upload-artifact@v4
        with:
          name: compression-history
          path: |
            _site/compression_history.json
          retention-days: 90
          if-no-files-found: ignore
      
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3

  # Fallback build job (in case custom container fails)
  build-fallback:
    runs-on: ubuntu-latest
    if: failure()
    needs: [build]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download previous compression history
        uses: actions/download-artifact@v4
        with:
          name: compression-history
          path: _site/
        continue-on-error: true
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@4a9ddd6f338a97768b8006bf671dfbad383215f4
        with:
          ruby-version: '3.2'
          bundler-cache: false
          cache-version: 0
          
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install ImageMagick
        run: sudo apt-get update && sudo apt-get install -y imagemagick
        
      - name: Install dependencies
        run: bundle install --jobs 4 --retry 3 && python3 -m pip install colorama requests bs4 tabulate

      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" --config _config.yml,_config.production.yml --trace --verbose
        env:
          JEKYLL_ENV: production

      - name: Generate SEO Report
        run: python3 seo.py --verbose --html-output _site/seo.html --threads 8 --base-url https://stanthonynovato.github.io/${{ steps.pages.outputs.base_url}}
      
      - name: Archive compression analysis data
        uses: actions/upload-artifact@v4
        with:
          name: compression-history
          path: |
            _site/compression_history.json
          retention-days: 90
          if-no-files-found: ignore
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, build-fallback]
    if: always() && (needs.build.result == 'success' || needs.build-fallback.result == 'success')
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

name: Lighthouse CI (Jekyll Serve)

on:
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    container:
        image: ghcr.io/stanthonynovato/say-website-builder:latest

    steps:
      - name: ðŸ§¾ Checkout code
        uses: actions/checkout@v4

      - name: ðŸ§° Manually install Node.js 20
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs

      - name: ðŸ’Ž Manually install Ruby 3.2
        run: |
          apt-get update && apt-get install -y ruby ruby-dev build-essential
          gem install bundler

      - name: ðŸ“¦ Install dependencies
        run: |
          bundle install
          npm install
          npm install -g wait-on

      - name: ðŸš€ Start Jekyll Server in background
        run: |
          echo "Starting Jekyll server..."
          JEKYLL_ENV=production bundle exec jekyll serve --port 4000 --host 0.0.0.0 > jekyll.log 2>&1 &
          echo $! > jekyll.pid
          sleep 2
          tail -f jekyll.log | sed '/Server running/ q'
          
          echo "Jekyll PID: $(cat jekyll.pid)"

      - name: ðŸ•° Wait for server to be ready
        run: |
          echo "Waiting for Jekyll server to start..."
          # Try wait-on with timeout first
          if ! wait-on http://127.0.0.1:4000 --timeout 60000; then
            echo "wait-on failed, trying curl method..."
            # Fallback: manual check with curl
            for i in {1..30}; do
              if curl -f http://127.0.0.1:4000 >/dev/null 2>&1; then
                echo "Server is ready!"
                break
              fi
              echo "Attempt $i: Server not ready yet, waiting..."
              sleep 2
            done
          else
            echo "Server is ready via wait-on!"
          fi

      - name: ðŸ”¦ Run Lighthouse Audit
        run: |
          npx lhci collect --url=http://127.0.0.1:4000 \
            --settings.emulatedFormFactor=desktop

      - name: ðŸ§¼ Kill Jekyll Server
        run: |
          kill $(cat jekyll.pid) || true
          
      - name: ðŸ“Š Generate Lighthouse Report
        id: lighthouse-report
        run: |
          python3 ci/gen-lh-comment.py > lighthouse-report.md
          echo "report-generated=true" >> $GITHUB_OUTPUT

      - name: ðŸ’¬ Comment PR with Lighthouse Results
        if: steps.lighthouse-report.outputs.report-generated == 'true'
        uses: thollander/actions-comment-pull-request@v3
        with:
          file-path: lighthouse-report.md
          comment-tag: lighthouse-ci
          mode: recreate
